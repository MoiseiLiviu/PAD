// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthLoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CartGraphqlType struct {
	UserID int                    `json:"userId"`
	Items  []*CartItemGraphqlType `json:"items"`
}

type CartItemGraphqlType struct {
	ProductID int    `json:"productId"`
	Quantity  int    `json:"quantity"`
	ImageURL  string `json:"imageUrl"`
	Price     int    `json:"price"`
	Name      string `json:"name"`
}

type CartItemInput struct {
	ProductID int `json:"productId"`
	Quantity  int `json:"quantity"`
}

type CategoryGraphqlType struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type CreateCategoryInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type CreateProductInput struct {
	Name           string  `json:"name"`
	Price          float64 `json:"price"`
	ImageURL       *string `json:"imageUrl,omitempty"`
	UnitsAvailable int     `json:"unitsAvailable"`
	CategoriesIds  []int   `json:"categoriesIds"`
}

type OrderCreatedType struct {
	OrderID int `json:"orderId"`
}

type OrderStatusGraphqlType struct {
	Value OrderStatus `json:"value"`
}

type ProductCategoryGraphqlType struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type ProductGraphqlType struct {
	ID             int                           `json:"id"`
	Name           string                        `json:"name"`
	Price          float64                       `json:"price"`
	UnitsAvailable int                           `json:"unitsAvailable"`
	ImageURL       string                        `json:"imageUrl"`
	Categories     []*ProductCategoryGraphqlType `json:"categories,omitempty"`
}

type RegisterUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateItemInput struct {
	ProductID   int `json:"productId"`
	NewQuantity int `json:"newQuantity"`
}

type OrderStatus string

const (
	OrderStatusUnknown       OrderStatus = "UNKNOWN"
	OrderStatusCreated       OrderStatus = "CREATED"
	OrderStatusApproved      OrderStatus = "APPROVED"
	OrderStatusPaid          OrderStatus = "PAID"
	OrderStatusPaymentFailed OrderStatus = "PAYMENT_FAILED"
	OrderStatusItemsRejected OrderStatus = "ITEMS_REJECTED"
	OrderStatusUnrecognized  OrderStatus = "UNRECOGNIZED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusUnknown,
	OrderStatusCreated,
	OrderStatusApproved,
	OrderStatusPaid,
	OrderStatusPaymentFailed,
	OrderStatusItemsRejected,
	OrderStatusUnrecognized,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusUnknown, OrderStatusCreated, OrderStatusApproved, OrderStatusPaid, OrderStatusPaymentFailed, OrderStatusItemsRejected, OrderStatusUnrecognized:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
